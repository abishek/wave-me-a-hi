{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","currentAccount","setCurrentAccount","_useState3","_useState4","waveCount","setWaveCount","contractABI","abi","checkIfWalletIsConnected","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","_window","ethereum","accounts","account","provider","signer","wavePortalContract","count","wrap","_context","prev","next","window","console","log","request","method","sent","length","ethers","providers","Web3Provider","getSigner","Contract","getTotalWaves","toNumber","t0","stop","apply","this","arguments","connectWallet","_ref2","_callee2","_window2","_context2","abrupt","useEffect","waveHi","_ref3","_callee3","_window3","waveTxn","_context3","wave","hash","wait","react_default","createElement","className","onClick","role","aria-label","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.94b9a220.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from \"./utils/WavePortal.json\";\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [waveCount, setWaveCount] = useState(0);\n  const contractAddress = \"0xE9885fE389bfD3c579f7C628F82a02f4A10C1645\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"No wallet connected.\");\n      } else {\n        console.log(\"Connected: \", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Authorised account: \", account);\n\n        setCurrentAccount(account);\n\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const count = await wavePortalContract.getTotalWaves();\n        setWaveCount(count.toNumber());\n      } else {\n        console.log(\"No authorised account.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Metamask wallet not found.\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const waveHi = async () => {\n    try {\n      const { ethereum } = window;\n      \n      if(ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waveTxn  = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        const count = await wavePortalContract.getTotalWaves();\n        setWaveCount(count.toNumber());\n      } else {\n        console.log(\"ETH object doesn't exist.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div className='App'>\n      <p>I have {waveCount} waves! Thanks y'all!!</p>\n      <button className=\"wave-btn\" onClick={waveHi}>Hi <span role=\"img\" aria-label=\"hi\">ðŸ‘‹</span></button>\n      {!currentAccount && (\n        <button className=\"connect-btn\" onClick={connectWallet}>Connect Wallet</button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}